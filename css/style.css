/*
Regla CSS consta de dos partes
1)el selector
2)bloque de declaraciones:{
}
atributo: valor;
atributo-de-mas-palabras:otro-valor;
*/
/*son mala practica porque son bloqueantes a la hora de que el navegador lee esta instrucci√≥n*/
@import url(otra\ hoja.css);

h1{
color: orangered;  
background-color:black;  
}

h1{
    border-color: greenyellow ;
    border-style: solid;
    text-align: center;
}

/*selectores basicos:
1) etiquetas-son elementos html
2) identificadores-atributo id-#
3)clases-atributo class-.*/

/*dar estilos con id se considera un antipatr√≥n*/

#parrafo-dos {
    background-color: skyblue;
}


/*dar estilos con clase nos permite reutilizar nuestro codigo CSS*/

.text-20{
    font-size: 20px;
}

.text-32{
    font-size: 32;
}

.bg-skyblue{
    background-color: skyblue;
}

.bg-steelblue{
    background-color: steelblue;
}

.text-white{
    color: white;
}

.text-60 {
    font-size: 60px;
}

.text-red {
    color: red;
}

.bg-yellow {
    background-color: yellow
}

.text-25{
    font-size: 25px;
}

.text-blue{
    color: blue;
}

.bg-green{
    background: green;
}

.hijos-directos > li{
    background: thistle;
}

.hijos-descendientes b{
    background-color: thistle;
}


.posiciones-directas b{
    color: red;
}


.dias-de-la-semana b {
    color: darkgoldenrod;
}

/* los selectores de hermano van a aplicar a los elementos que son hermanos y a los que esten por debajo de la referencia */

.hermanos-general ~ li{
    background-color: thistle;
} 

.hermanos-adyacentes + li{
    background-color: thistle;
}


/* ">" este simbolo se utiliza cuando le quiero dar estilos a selectores de hijos directos (que es cuando quiero darle estilo
a todo el formato con la misma referencia) */


/* "b" esta letra se utiliza cuando le quiero dar estilos a selectores de hijos directos (que es cuando le quiero dar estilos
uno por uno con la misma referencia)  */


/* "~" este simbolo se utiliza cuando le quiero dar estilos a hermanos en general (que es cuando le quiero dar estilo 
al elemento que seleccione y todos los que hayan por debajo de √©l con la misma referencia) */

/* "+" este simbolo lo utilizo cuando le quiero dar estilos a hermanos adyacentes (a un elemento que est√© por debajo del elemento
 de referencia con las mismas referencias)*/


/* selectores de atributos */

.selectores-atributos a[href] {
    color: orangered;
}

/* el comodin del * aplica el estilo si contiene el texto en cuestion en cualquier parte */

.selectores-atributos a[href*="http:"] {
    color: pink;

} 


/* el comodin del ^ aplica el estilo si contiene el texto en cuestion al inicio */

.selectores-atributos a[href^="+"] {
     color: burlywood;
     font-size: 20px;
}



.selectores-atributos a[target="_blank"] {
    font-weight: bold;
}


/* el comodin del ~  aplica el estilo si contiene el texto en custion en una lista separada por espacios */
.selectores-atributos a[class~="cursos"] {
    background-color: midnightblue;
    text-decoration: none;
} 

/* el comodin del  $ aplica el estilo si contiene el texto eal final */
.selectores-atributos a[href$="trial"] {
    background-color: black;
    text-decoration: none;
}s

/* selector universal */

* {
    font-family: sans-serif;
} 


.selector-universal * {
    font-size: 24px;
}

/* pseudoclases: dan estilos dependiendo del contexto, posicion o estado del elemento 
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes */


.form-pseudoclases *:required {
    border-color: blue;

}

.form-pseudoclases *:invalid {
    border-color: red;
}

.form-pseudoclases :focusc{
    background-color: skyblue;
}

.form-pseudoclases *:disabled {
    background-color: pink;
}

.menu-pseudoclases a:hover {
    color: red;
}
.visited a:visited {
    color: olive;
}

.menu-pseudoclases a:visited {
    color: olive;
}

.menu-pseudoclases a:visited {
    color: red;
}

.p-pseudoclases:hover {
    font-size: 25px;
}

.estaciones b {
    color: red;
}

.meses1 li:first-child{
    color: red;
}

.meses1 li:last-child {
    color: pink;
}

.meses1 li:nth-child(4) {
    color: yellow;
}

.meses1 li:nth-child(4n) {
    color: blue;
}

.meses1 li:nth-child(3n) {
    color: burlywood;
}

.paises-sur-america {
    color: red;
    font-weight: bold;
}

.paises li:hover {
    color: blue;
}

.paises li:nth-child(6) {
    color: aqua;
}

.paises li:last-child {
    color: blue;
}

.paises li:first-child {
    color: greenyellow;

}

.meses1 li:nth-child(3n) {
    font-size: 24px;
}

.meses1 li:nth-child(even) {
    background-color: yellow;
}

.meses1 li:nth-child(odd) {
    background-color: red;
}

.articulo-pseudoclases :first-child {
    background-color: red;
}
.ul :last-child {
    color: red;
}

.articulo-pseudoclases p:last-of-type {
    color: blue;
}

.articulo-pseudoclases p:nth-of-type(2) {
    background-color:red;
}



.articulo-pseudoclases *:not(p) {
    color: yellow;
}

/* pseudoelementos- dan estilos a partes especificas de un elmento se usa el :: para diferenciarlos de las pseudoclases
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements */

.saga-geminis::before {
    content:"üôÇ‚Äç‚ÜîÔ∏è";
}

.saga-geminis::after{
    content:"üôÇ‚Äç";
}

.saga-precio::before {
    content:"$";
    font-weight: bold;
    color: red;
    
}

.saga-precio::after {
    content:"USD";
    color: yellowgreen;
    font-weight: bold;

}

.p-pseudoelementos::first-letter {
    font-weight: bold;
    font-size: 30px;
}

.p-pseudoelementos::first-line {
    color: coral;
}


.p-pseudoelementos::selection{
    color: yellow;
    background-color: red;S
}

.input-pseudoelementos::placeholder {
    color: blue;
}

/* agrupar selectores */

.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
    border-color: yellow;
    background-color: black;
    border-style: dashed;
     font-size: 20px;
    display: block;
    width: 300px;border-width: 2px;


}

/* el algoritmo de CSS: es la forma en que el navegador aplica los estilos al documento HTML 
es vital entender este concepto para que entiendas y como se aplican y en algunas ocasiones 
se sobreescriben las reglas CSS
1) la cascada
2) la especifidad
3) la herencia 
*/

/* la cascada es el mecanismo en el que el navegador aplica los estilos y toma en cuenta lo siguente
en este orden:

1) el origen del codigo:
   -el user agent (los estilos por defecto del navegador)
   -personalizaciones del usuario
   -los estilos del autor
2) la especificidad del selector
3) orden de aparicion
*/

/* especificidad: la especificidad es el peso que tiene un selector cuando hay un conflicto de estilos */

blockquote {
    background-color: burlywood;
}




/* la herencia: es la capacidad de un selector de obtener (heredar) los valores de sus ancestros mas cercanos,
para aplicarla se utuliza el valor inherit, si queremos evitarla podemos asignar otro valor
o inicializar la propiedad en cuestion con el valor initial*/

.cita-luis {
    color: blue;
    border-style: dotted;
    border-color: pink;
}

.cita-luis cite {
    color: red;
    font-size: 24px;
}


.cita-luis cite {
    color: inherit;
    border-style: inherit;
    border-color: inherit;
}



